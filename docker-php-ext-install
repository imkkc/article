https://www.cnblogs.com/yinguohai/p/11329273.html

Docker 中的PHP容器安装扩展的方式有
通过pecl方式安装
通过php容器中自带的几个特殊命令来安装，这些特殊命令可以在Dockerfile中的RUN命令中进行使用。
这里，我们主要讨论的是第二种方案，如何通过PHP容器中的几个特殊命令来安装PHP扩展

PHP中安装扩展有几个特殊的命令

docker-php-source
此命令，实际上就是在PHP容器中创建一个/usr/src/php的目录，里面放了一些自带的文件而已。
我们就把它当作一个从互联网中下载下来的PHP扩展源码的存放目录即可。事实上，所有PHP扩展源码扩展存放的路径： /usr/src/php/ext 里面。

格式：docker-php-source extract | delete

参数说明：
* extract : 创建并初始化 /usr/src/php目录
* delete : 删除 /usr/src/php目录

docker-php-ext-enable
这个命令用来启动PHP扩展的。我们使用pecl安装PHP扩展，默认是没有启动这个扩展的，必须要在php.ini配置一下才能使用这个PHP扩展。
而 docker-php-ext-enable 这个命令则是自动给我们来启动PHP扩展的，不需要你去php.ini这个配置文件中去配置。

docker-php-ext-install
这个命令，是用来安装并启动PHP扩展的。
命令格式：docker-php-ext-install “源码包目录名”
注意点：
“源码包“需要放在 /usr/src/php/ext 下
默认情况下，PHP容器没有 /usr/src/php这个目录，需要使用 docker-php-source extract来生成。
docker-php-ext-install 安装的扩展在安装完成后，会自动调用docker-php-ext-enable来启动安装的扩展。
卸载扩展，直接删除/usr/local/etc/php/conf.d 对应的配置文件即可。

docker-php-ext-configure
docker-php-ext-configure 一般都是需要跟 docker-php-ext-install搭配使用的。
它的作用就是，当你安装扩展的时候，需要自定义配置时，就可以使用它来帮你做到。


为啥通常会看见dockerFile最下面会有这么一行 RUN usermod -u 1000 www-data
直接百度搜usermod -u 1000 www-data能找到答案

简要说明：
进入容器的bash以后，通过ps aux来查看【容器主进程】的owner用户是谁
这个owner就是需要访问文件的用户，他的权限决定了这个进程是否有权访问【我们bind-mount、COPY到容器中的文件】

主进程的拥有者是root可以读写任何文件，权限肯定没问题。但是主进程还创建了两个子进程，
拥有者是www-data这个用户有可能无法读写【被bind-mount或者COPY到容器内的文件】！

使用命令 id www-data 查看这个用户的权限，发现www-data的ownerId:groupId是33:33。
使用stat或者ls -na命令，查看【COPY到容器内的文件】发现ownerId:groupId都是1000:1000

再结合这些文件的权限信息（比如-rw-rw-r--、drwx------），www-data只能读取其中一些文件，无法写入任何文件

所以RUN usermod -u 1000 www-data 改成与copy进容器内的文件一样就行了



