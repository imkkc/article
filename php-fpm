本文来源 https://www.cnblogs.com/phpworld/p/10538604.html
关于php-fpm比较重要的几个参数

pm.max_children 设置多大合适？
php-fpm.conf有两个至关重要的参数：

pm.max_children //表示 php-fpm 能启动的子进程的最大数量。
request_terminate_timeout //表示将执行时间太长的进程直接终止。

我的两个设置的值一个是”40″，一个是”900″，但是这个值不是通用的，而是需要自己计算的。

一、pm.max_children 多大合适？

这个值原则上是越大越好，php-cgi的进程多了就会处理的很快，排队的请求就会很少。
设置”max_children” 也需要根据服务器的性能进行设定。

计算方式如下：
一般来说一台服务器正常情况下每一个php-cgi所耗费的内存在20M~30M左右，因此我的”max_children”我设置成40个，20M*40=800M
也就是说在峰值的时候所有PHP-CGI所耗内存在800M以内，低于我的有效内存2Gb。

而如果我的”max_children”设置的较小，比如5-10个，那么php-cgi就会“很累“，处理速度也很慢，等待的时间也较长，占用的CPU也很高。

如果长时间没有得到处理的请求就会出现 504 Gateway Time-out 这个错误，

而正在处理的很累的那几个php-cgi如果遇到了问题就会出现 502 Bad gateway 这个错误。

max_children较好的设置方式根据req/s（吞吐率，单位时间里服务器处理的最大请求数，单位req/s）来设置，
若程序是 100 req/s 的处理能力，那么就设置 100比较好，这是动态来调整的。

 

二、request_terminate_timeout 多大合适？
计算方式如下：

如果你的服务器性能足够好，且宽带资源足够充足，PHP脚本没有循环或BUG的话你可以直接将”request_terminate_timeout”设 置成0s。
0s的含义是让PHP-CGI一直执行下去而没有时间限制。

而如果你做不到这一点，也就是说你的PHP-CGI可能出现某个BUG，或者你的宽带不够充足或者其他的原因导致你的PHP-CGI能够假死，
那么就建议你给”request_terminate_timeout”赋一个值，这个值可以根据你服务器的性能进行设定。

一般来说性能越好你可以设置越高，20分钟-30分钟都可以。由于我的服务器PHP脚本需要长时间运行，有的可能会超过10分钟因此我设置了900秒，
这样不会导致PHP-CGI死掉而出现502 Bad gateway这个错误。

#################################################################################

pm = dynamic; 表示使用哪种进程数量管理方式

dynamic表示php-fpm进程数是动态的，最开始是pm.start_servers指定的数量，如果请求较多，则会自动增加，
保证空闲的进程数不小于pm.min_spare_servers，
如果进程数较多，也会进行相应清理，保证多余的进程数不多于pm.max_spare_servers；

static表示php-fpm进程数是静态的，进程数自始至终都是pm.max_children指定的数量，不再增加或减少。

pm.max_children = 300; 静态方式下开启的php-fpm进程数量

pm.start_servers = 20; 动态方式下的起始php-fpm进程数量
pm.min_spare_servers = 5; 动态方式下的最小php-fpm进程数量
pm.max_spare_servers = 35; 动态方式下的最大php-fpm进程数量

 
数值设置，参考自己的实际硬件配置，可以参考 总内存/30M 来计算。

如果dm设置为static，那么其实只有pm.max_children这个参数生效。系统会开启设置数量的php-fpm进程。

如果dm设置为dynamic，那么pm.max_children参数失效，后面3个参数生效。
系统会在php-fpm运行开始的时候启动pm.start_servers个php-fpm进程，
然后根据系统的需求动态在pm.min_spare_servers和pm.max_spare_servers之间调整php-fpm进程数。

 
如何判断我选择“pm = dynamic”还是“pm = static”呢？哪一种更好呢？
事实上，跟Apache一样，运行的PHP程序在执行完成后，或多或少会有内存泄露的问题。

这也是为什么开始的时候一个php-fpm进程只占用3M左右内存，运行一段时间后就会上升到20-30M的原因了。

对于内存大的服务器（比如8G以上）来说，用静态的max_children实际上更为妥当，因为这样不需要进行额外的进程数目控制，会提高效率。
因为频繁开关php-fpm进程也会有时滞，所以内存够大的情况下开静态效果会更好。数量也可以根据 总内存/30M 得到，
比如8GB内存可以设置为100，那么php-fpm耗费的内存就能控制在 2G-3G的样子。

如果内存稍微小点，比如1~2G，那么指定静态的进程数量更加有利于服务器的稳定。
这样可以保证php-fpm只获取够用的内存，将不多的内存分配给其他应用去使用，会使系统的运行更加畅通。

 
对于小内存的服务器来说，比如256M内存的VPS，即使按照一个20M的内存量来算，10个php-cgi进程就将耗掉200M内存，那系统的崩溃就应该很正常了。
因此应该尽量地控制php-fpm进程的数量，大体明确其他应用占用的内存后，给它指定一个静态的小数量，会让系统更加平稳一些。

或者使用动态方式，因为动态方式会结束掉多余的进程，可以回收释放一些内存，所以推荐在内存较少的服务器或VPS上使用，具体最大数量根据 总内存/20M 得到。
比如说512M的VPS，建议pm.max_spare_servers设置为20。至于pm.min_spare_servers，则建议根据服务器的负载情况来设置，比较合适的值在5~10之间。

总结：内存小的建议用动态（pm = dynamic），内存大的建议用静态（pm = static）。

###############################


配置php慢日志，用于监控

request_slowlog_timeout = 10s

slowlog = log/$pool.log.slow

 
配置php-fpm进程可打开的最大文件句柄数，

rlimit_files = 1024

默认1024，此值可以不需要配置


