
文章出处https://www.cnblogs.com/phpfeng/p/9204586.html

php token

接口特点汇总：

1、因为是非开放性的，所以所有的接口都是封闭的，只对公司内部的产品有效；

2、因为是非开放性的，所以OAuth那套协议是行不通的，因为没有中间用户的授权过程；

3、有点接口需要用户登录才能访问；

4、有点接口不需要用户登录就可访问


针对以上特点，移动端与服务端的通信就需要2把钥匙，即2个token。

第一个token是针对接口的（api_token）；

第二个token是针对用户的（user_token）；

 
先说第一个token（api_token）


它的职责是保持接口访问的隐蔽性和有效性，保证接口只能给自家人用，怎么做到？参考思路如下：

现在的接口基本是mvc模式，URL基本是restful风格，URL大体格式如下：

http://blog.snsgou.com/模块名/控制器名/方法名?参数名1=参数值1&参数名2=参数值2&参数名3=参数值3

 

接口token生成规则参考如下：

api_token = md5 ('模块名' + '控制器名' + '方法名' + '2013-12-18' + '加密密钥') = 770fed4ca2aabd20ae9a5dd774711de2

其中的 

1、 '2013-12-18' 为当天时间，

2、'加密密钥' 为私有的加密密钥，手机端需要在服务端注册一个“接口使用者”账号后，系统会分配一个账号及密码，数据表设计参考如下：

字段名	       字段类型	       注释
client_id	varchar(20)	    客户端ID
client_secret	varchar(20)	    客户端(加密)密钥

（注：只列出了核心字段，其它的再扩展吧！！！）

服务端接口校验，PHP实现流程如下：

	<?php
	// 1、获取 GET参数 值
	$module = $_GET['mod'];
	$controller = $_GET['ctl']
	$action = $_GET['act'];
	$client_id = $_GET['client_id'];
	$api_token = $_GET[''api_token];
	 
	// 2、根据客户端传过来的 client_id ，查询数据库，获取对应的 client_secret
	$client_secret = getClientSecretById($client_id);
	 
	// 3、服务端重新生成一份 api_token
	$api_token_server = md5($module . $controller . $action .  date('Y-m-d', time()) .  $client_secret);
	 
	// 4、客户端传过来的 api_token 与服务端生成的 api_token 进行校对，如果不相等，则表示验证失败
	if ($api_token != $api_token_server) {
	    exit('access deny');  // 拒绝访问
	}
	 
	// 5、验证通过，返回数据给客户端
	//。。。
	?>
 


再说第二个token（user_token）


它的职责是保护用户的用户名及密码多次提交，以防密码泄露。

如果接口需要用户登录，其访问流程如下：

1、用户提交“用户名”和“密码”，实现登录（条件允许，这一步最好走https）；

2、登录成功后，服务端返回一个 user_token，生成规则参考如下：

服务端用数据表维护user_token的状态，表设计如下：

字段名	     字段类型	    注释
user_id		int		用户ID
user_token	varchar(36)	用户token
expire_time	int		过期时间（Unix时间戳）

（注：只列出了核心字段，其它的再扩展吧！！！）

服务端生成 user_token 后，返回给客户端（自己存储），客户端每次接口请求时，如果接口需要用户登录才能访问，则需要把 user_id 与 user_token 传回给服务端，服务端接受到这2个参数后，需要做以下几步：

1、检测 api_token的有效性；

2、删除过期的 user_token 表记录；

3、根据 user_id，user_token 获取表记录，如果表记录不存在，直接返回错误，如果记录存在，则进行下一步；

4、更新 user_token 的过期时间（延期，保证其有效期内连续操作不掉线）；

5、返回接口数据；

 

接口用例如下：

1、发布日志

URL：  http://blog.snsgou.com/blog/Index/addBlog?client_id=wt3734wy636dhd3636sr5858t6&api_token=880fed4ca2aabd20ae9a5dd774711de2&user_token=etye0fgkgk4ca2aabd20ae9a5dd77471fgf&user_id=12

请求方式：  POST

POST参数：title=我是标题&content=我是内容

返回数据：

{
      'code' => 1, // 1:成功 0:失败
      'msg' => '操作成功' // 登录失败、无权访问
      'data' => []
}
