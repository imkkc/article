
https://blog.csdn.net/fujiandiyi008/article/details/88373792


面试官：“讲讲mysql有几个事务隔离级别？”  

你：“读未提交，读已提交，可重复读，串行化四个！默认是可重复读”

面试官：“为什么mysql选可重复读作为默认的隔离级别？”   

(你面露苦色，不知如何回答！)   

面试官:"你们项目中选了哪个隔离级别？为什么？"   

你：“当然是默认的可重复读，至于原因。。呃。。。”   

(然后你就可以回去等通知了！)


Mysql默认的事务隔离级别是可重复读(Repeatable Read)，。
但是互联网项目中Mysql一般用读已提交(Read Commited)这个隔离级别！

在Oracle，SqlServer中都是选择读已提交(Read Commited)作为默认的隔离级别，
为什么Mysql不选择读已提交(Read Commited)作为默认隔离级别，而选择可重复读(Repeatable Read)作为默认的隔离级别呢？

这个是有历史原因的，当然要从我们的主从复制开始讲起了！
主从复制，是基于什么复制的？
是基于binlog复制的！这里不想去搬binlog的概念了，就简单理解为binlog是一个记录数据库更改的文件吧～
binlog有几种格式？
OK，三种，分别是

statement:记录的是修改SQL语句
row：记录的是每行实际数据的变更    
mixed：statement和row模式的混合    

那Mysql在5.0这个版本以前，binlog只支持STATEMENT这种格式！在读已提交(Read Commited)隔离级别主从复制是有bug
因此Mysql将可重复读(Repeatable Read)作为默认的隔离级别！

原因其实很简单，就是当在master上执行的顺序为先删后插！而此时binlog为STATEMENT格式，它记录的顺序为先插后删！
从(slave)同步的是binglog，因此从机执行的顺序和主机不一致！就会出现主从不一致！


解决方案有两种！
(1)隔离级别设为可重复读(Repeatable Read),在该隔离级别下引入间隙锁。当Session 1执行delete语句时，会锁住间隙。那么，Ssession 2执行插入语句就会阻塞住！
(2)将binglog的格式修改为row格式，此时是基于行的复制，自然就不会出现sql执行顺序不一样的问题！
奈何这个格式在mysql5.1版本开始才引入。因此由于历史原因，mysql将默认的隔离级别设为可重复读(Repeatable Read)，保证主从复制不出问题！

那么，当我们了解完mysql选可重复读(Repeatable Read)作为默认隔离级别的原因后，
接下来我们将其和读已提交(Read Commited)进行对比，来说明为什么在互联网项目为什么将隔离级别设为读已提交(Read Commited)！

1、可重复读：存在间隙锁，导致出现死锁的几率比RC大的多！
2、可重复读：条件列未命中索引会锁表！而在读已提交隔离级别下，只锁行
3、在读已提交隔离级别下，半一致性读(semi-consistent)特性增加了update操作的并发性！

在5.1.15的时候，innodb引入了一个概念叫做“semi-consistent”，减少了更新同一行记录时的冲突，减少锁等待。
所谓半一致性读就是，一个update语句，如果读到一行已经加锁的记录，此时InnoDB返回记录最近提交的版本，由MySQL上层判断此版本是否满足update的where条件。
若满足(需要更新)，则MySQL会重新发起一次读操作，此时会读取行的最新版本(并加锁)！
具体表现如下:
此时有两个Session，Session1和Session2！
Session1执行

update test set color = 'blue' where color = 'red'; 
先不Commit事务！
与此同时Ssession2执行

update test set color = 'blue' where color = 'white'; 
session 2尝试加锁的时候，发现行上已经存在锁，InnoDB会开启semi-consistent read，返回最新的committed版本(1,red),(2，white),(5,red),(7,white)。
MySQL会重新发起一次读操作，此时会读取行的最新版本(并加锁)!
而在RR隔离级别下，Session2只能等待！

在RC级别下，主从复制用什么binlog格式？
OK,在该隔离级别下，用的binlog为row格式，是基于行的复制！Innodb的创始人也是建议binlog使用该格式！



